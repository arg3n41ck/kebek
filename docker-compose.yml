version: '3.7'

services:
    redis:
      image: redis:latest
      container_name: redis_server
      ports:
        - '6379:6379'
      networks:
        - my-network

    db:
      image: postgis/postgis:latest
      volumes:
        - postgres_data:/var/lib/postgresql/data/
      networks:
        - my-network
      env_file:
        - ./.env

    backend:
      restart: unless-stopped
      build:
        context: .
        dockerfile: ./docker/backend/Dockerfile
      volumes:
          - static_volume:/app/backend/src/staticfiles
      entrypoint: /app/docker/backend/wsgi-entrypoint.sh
      networks:
        - my-network
      depends_on:
        - db
        - redis
      env_file:
        - ./.env

    celery:
      build:
        context: .
        dockerfile: ./docker/backend/Dockerfile
      container_name: celery_worker
      command: bash -c 'cd /app/backend/src/ && celery -A src worker -l info'
      networks:
        - my-network
      depends_on:
        - redis
      restart: always
      env_file:
        - ./.env

    nginx:
      restart: unless-stopped
      build:
        context: .
        dockerfile: ./docker/nginx/Dockerfile
      ports:
        - 80:80
        - 443:443
      volumes:
        - ./docker/nginx/dev:/etc/nginx/conf.d
        - static_volume:/app/backend/src/staticfiles
        - ./docker/nginx/certbot/conf:/etc/letsencrypt
        - ./docker/nginx/certbot/www:/var/www/certbot
      networks:
        - my-network
      depends_on:
        - db
        - backend

    certbot:
      image: certbot/certbot
      restart: unless-stopped
      volumes:
        - ./docker/nginx/certbot/conf:/etc/letsencrypt
        - ./docker/nginx/certbot/www:/var/www/certbot
      entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  static_volume:
  postgres_data:

networks:
  my-network:
